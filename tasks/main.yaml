---

- name: Setup provider to connect to CM device
  set_fact:
    provider:
      server: "{{ register_dcd_cm_server }}"
      server_port: "{{ register_dcd_cm_server_port }}"
      user: "{{ register_dcd_cm_user }}"
      password: "{{ register_dcd_cm_password }}"
      validate_certs: "{{ register_dcd_cm_validate_certs }}"
      transport: "{{ register_dcd_cm_transport }}"

- name: Wait for BIG-IQ to be available
  uri:
    url: "https://{{ provider.server }}:{{ provider.server_port }}/info/system"
    timeout: "{{ register_dcd_cm_timeout }}"
    validate_certs: "{{ register_dcd_cm_validate_certs }}"
  register: status
  until: status is success and status.json.available|bool
  retries: 10
  delay: 6

- name: Get authentication token
  uri:
    url: "https://{{ provider.server }}:{{ provider.server_port }}/mgmt/shared/authn/login"
    method: POST
    timeout: "{{ register_dcd_cm_timeout }}"
    validate_certs: "{{ register_dcd_cm_validate_certs }}"
    body:
      username: "{{ provider.user }}"
      password: "{{ provider.password }}"
    body_format: json
  register: r

- name: Set the token fact if authentication succeeded
  set_fact:
    f5_auth_token: "{{ r.json.token.token }}"
  when: r is success

- name: Test authentication
  uri:
    url: "https://{{ provider.server }}:{{ provider.server_port }}/mgmt/shared/echo"
    timeout: "{{ register_dcd_cm_timeout }}"
    validate_certs: "{{ register_dcd_cm_validate_certs }}"
    headers:
      X-F5-Auth-Token: "{{ f5_auth_token }}"
  register: status

- name: Get device provisioning type
  uri:
    url: "https://{{ provider.server }}:{{ provider.server_port }}/mgmt/cm/system/provisioning"
    timeout: "{{ register_dcd_cm_timeout }}"
    validate_certs: "{{ register_dcd_cm_validate_certs }}"
    headers:
      X-F5-Auth-Token: "{{ f5_auth_token }}"
  register: r

- name: Fail if you're running the role against a DCD device
  fail:
    msg: "This role should be run against a CM device, but you appear to be running it against a DCD device"
  when: r.json.systemPersonality == 'logging_node'

- name: Check if system is setup
  uri:
    url: "https://{{ provider.server }}:{{ provider.server_port }}/mgmt/shared/system/setup"
    timeout: "{{ register_dcd_cm_timeout }}"
    validate_certs: "{{ register_dcd_cm_validate_certs }}"
    headers:
      X-F5-Auth-Token: "{{ f5_auth_token }}"
  register: setup

- name: Stop if the system is not setup
  fail:
    msg: "The DCD device has not been setup. Please onboard the DCD device first."
  when: setup.json.isSystemSetup is not defined or not setup.json.isSystemSetup|bool

- name: Check that device is not already registered
  uri:
    url: "https://{{ provider.server }}:{{ provider.server_port }}/mgmt/shared/resolver/device-groups/cm-esmgmt-logging-group/devices"
    timeout: "{{ register_dcd_cm_timeout }}"
    validate_certs: "{{ register_dcd_cm_validate_certs }}"
    headers:
      X-F5-Auth-Token: "{{ f5_auth_token }}"
  register: setup

- name: Get devices from CM
  set_fact:
    devices: "{{ setup.json | json_query('items[*].address') }}"

- import_tasks: setup-dcd-device.yaml
  when: register_dcd_dcd_server not in devices
